# AUTOGENERATED BY BOLT
# DO NOT MODIFY

function bolt {
  $fso = New-Object -ComObject Scripting.FileSystemObject
  
  $script:BOLT_BASEDIR = (Get-ItemProperty -Path "HKLM:\Software\Puppet Labs\Bolt").RememberedInstallDir
  # Windows API GetShortPathName requires inline C#, so use COM instead
  $script:BOLT_BASEDIR = $fso.GetFolder($script:BOLT_BASEDIR).ShortPath
  $script:RUBY_DIR = $script:BOLT_BASEDIR
  # Set SSL variables to ensure trusted locations are used
  $env:SSL_CERT_FILE = "$($script:BOLT_BASEDIR)\ssl\cert.pem"
  $env:SSL_CERT_DIR = "$($script:BOLT_BASEDIR)\ssl\certs"
  &$script:RUBY_DIR\bin\ruby -S -- $script:RUBY_DIR\bin\bolt ($args -replace '"', '"""')
}

function Invoke-BoltCommandline {
  [CmdletBinding()]
  param($params)
  $fso = New-Object -ComObject Scripting.FileSystemObject
  
  $script:BOLT_BASEDIR = (Get-ItemProperty -Path "HKLM:\Software\Puppet Labs\Bolt").RememberedInstallDir
  # Windows API GetShortPathName requires inline C#, so use COM instead
  $script:BOLT_BASEDIR = $fso.GetFolder($script:BOLT_BASEDIR).ShortPath
  $script:RUBY_DIR = $script:BOLT_BASEDIR
  # Set SSL variables to ensure trusted locations are used
  $env:SSL_CERT_FILE = "$($script:BOLT_BASEDIR)\ssl\cert.pem"
  $env:SSL_CERT_DIR = "$($script:BOLT_BASEDIR)\ssl\certs"

  $processArgs = @('-S', '--', "$script:RUBY_DIR\bin\bolt") + $params

  Write-Verbose "Executing $($script:RUBY_DIR)\bin\ruby $($processArgs -join ' ')"

  &$script:RUBY_DIR\bin\ruby $processArgs
}

<% @commands.each do |pwsh_command| %>
# Automatic pwsh bolt cmdlets
# <%= pwsh_command[:syntax] %>
function <%= pwsh_command[:cmdlet] -%> {
<#
.SYNOPSIS
<%= pwsh_command[:syntax] %>
.DESCRIPTION
<%= pwsh_command[:description] %>
<% pwsh_command[:options].each do |option| -%>
.PARAMETER <%= option[:name] %>
<%= option[:help_msg] %>
<% end -%>
.PARAMETER version
Get the version of the bolt installation
.LINK
https://puppet.com/products/bolt
.LINK
https://puppet.com/docs/bolt/latest/bolt_command_reference.html
#>
[CmdletBinding()]
param (
<% pwsh_command[:options].each do |option| -%>
<% if option[:validate_not_null_or_empty] -%>[ValidateNotNullOrEmpty()]<% end -%>
<% if option[:validate_set] -%>[ValidateSet(<%= option[:validate_set].map(&:inspect).join(', ') %>)]<% end -%>
<% if option[:ruby_short] -%>[Alias('<%= option[:ruby_short].gsub("-","") %>')]<% end -%>
[Parameter(Mandatory=$<%= option[:mandatory] -%><% if option[:position] -%>, Position=<%= option[:position] -%><% end -%><% if option[:parameter_set] -%>, ParameterSetName='<%= option[:parameter_set] -%>'<% end -%>)]
<% if option[:type] -%>[<%= option[:type] -%>]<% end -%>$<%= option[:name] -%>,
<% end -%>
[Parameter(Mandatory = $false)]
[switch]$version
)

if($version){
  return (Get-Content -Path $script:BOLT_BASEDIR\misc\versions.txt)[0].split(" ")[1]
}
<%# Need a way to store this better than yet another mapping %>
$mapping = @{
<% pwsh_command[:options].each do |option| -%>
"<%= option[:name] -%>" = "<%= option[:ruby_orig] -%>"
<% end -%>
}

$params = @('<%= pwsh_command[:ruby_command] -%>'<% if pwsh_command[:ruby_action] -%>, '<%= pwsh_command[:ruby_action] -%>'<% end -%>)

$params = $params + (Get-BoltCommandline -parameterHash $PSBoundParameters -mapping $mapping)

$result = Invoke-BoltCommandline $params

Write-Output $result

}
<% end %>

function Get-BoltCommandline {
  param($parameterHash, $mapping)

  $common = @(
    'ErrorAction', 'ErrorVariable', 'InformationAction',
    'InformationVariable', 'OutBuffer', 'OutVariable', 'PipelineVariable',
    'WarningAction', 'WarningVariable', 'Confirm', 'Whatif'
  )

  $params = @()
  foreach ($kvp in $parameterHash.GetEnumerator()) {
    if($kvp.Key -in $common){
      Write-Verbose "Skipping common parameter: $($kvp.Key)"
      continue
    }else{
      Write-Verbose "Examining $($kvp.Key)"
    }
    $pwshParameter = $kvp.Key
    $pwshValue     = $kvp.Value
    $rubyParameter = $mapping[$pwshParameter]
    switch($pwshValue){
      {$_ -is [System.Management.Automation.SwitchParameter]}{
        if($pwshValue -eq $true){
          $params += "--$($rubyParameter)"
        }else{
          $params += "--no-$($rubyParameter)"
        }
      }
      {$_ -is [System.Collections.Hashtable]}{
        $v = ConvertTo-Json -InputObject $pwshValue -Compress
        $params += "--$($rubyParameter)"
        $params += "'$($v)'"
      }
      default {
        if($rubyParameter){
          $params += "--$($rubyParameter)"
        }
        $params += "'$($pwshValue)'"
      }
    }
  }

  Write-Output $params
}
