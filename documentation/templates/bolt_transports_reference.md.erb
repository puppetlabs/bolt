# Transport configuration options

This page lists the configuration options that are available to each transport used by Bolt to connect
to targets. These options can be set in multiple locations:

- Under a `config` key in an [inventory file](inventory_files.md). 
- Under the `inventory-config` key in a [`bolt-defaults.yaml` file](bolt_defaults_reference.md).
- As top-level keys in a `bolt.yaml` file. â›” **The `bolt.yaml` file is deprecated.
  Use one of the other options above instead.**

<% @opts.each do |option, data| -%>
## `<%= option %>`

<%= data[:description] %>

<% if option == 'local' -%>
- ***nix:** `<%= @local_sets[:nix].join('`, `') %>`
- **Windows:** `<%= @local_sets[:win].join('`, `') %>`
<% end -%>

<% if data.key?(:_default) -%>
- **Default:** <%= data[:_default] %>
<% end -%>

<% if data.key?(:properties) -%>
<% data[:properties].each do |transport_option, data| -%>
### `<%= transport_option %>`

<%= data[:description] %>

<% if data.key?(:type) -%>
- **Type:** <%= data[:type] %>
<% end -%>
<% if data.key?(:enum) -%>
- **Available values:** `<%= data[:enum].join('`, `') %>`
<% end -%>
<% if data.key?(:_default) -%>
- **Default:** <%= data[:_default] %>
<% end -%>
<% if data[:_plugin] == true -%>
- **Pluggable:** true
<% end -%>


<% if data.key?(:_example) -%>
```yaml
<%= { transport_option => data[:_example] }.to_yaml(indentation: 2).split("\n").drop(1).join("\n") %>
```
<% end %>
<% end %>
<% end %>
<% if option == 'ssh' -%>
## OpenSSH Config

Bolt's SSH transport uses the Ruby library `net-ssh`, which is a pure Ruby
implementation of the SSH2 client protocol. The library reads and uses some,
but not all, settings from the user's OpenSSH configuration file (typically
`~/.ssh/config`). OpenSSH configuration takes the [lowest
precedence](configuring_bolt.md#configuration-precedence), and any configurable
settings that you've set through Bolt, such as `port`, override the OpenSSH
settings. Bolt uses the following OpenSSH configuration options when using the
SSH transport:

### `Ciphers`

Ciphers allowed in order of preference. Multiple ciphers must be comma-separated.

### `Compression`

Whether to use compression.

### `CompressionLevel`

Compression level to use if compression is enabled.

### `GlobalKnownHostsFile`

Path to global host key database.

### `HostKeyAlgorithms`

Host key algorithms that the client wants to use in order of preference.

### `HostKeyAlias`

Use alias instead of real hostname when looking up or saving the host key in the host key database file.

### `HostName`

Host name to log.

### `IdentityFile`

File in which user's identity key is stored.

### `Port`

SSH port.

### `User`

Login user.

### `UserKnownHostsFile`

Path to local user's host key database.

## Native `ssh`

Bolt's SSH transport uses the Ruby library `net-ssh`, which is a pure Ruby
implementation of the SSH2 client protocol. While robust, the library lacks
support for some features and algorithms that are available in native SSH.
When you use the native SSH transport, Bolt uses the SSH executable you've
specified instead of using `net-ssh`.

Set the `native-ssh` config option or pass `--native-ssh` on the command line
to enable native SSH. When using the native SSH transport, a more limited set
of configuration options is available.

```yaml
ssh:
  native-ssh: true
```

> ðŸ§ª The native SSH transport is experimental and is subject to
> breaking changes. To read more about the native SSH transport, see
> [Native SSH transport](experimental_features.md#native-ssh-transport).

<% @nativessh.each do |transport_option, data| -%>
### `<%= transport_option %>`

<%= data[:description] %>

<% if data.key?(:type) -%>
- **Type:** <%= data[:type] %>
<% end -%>
<% if data.key?(:enum) -%>
- **Available values:** `<%= data[:enum].join('`, `') %>`
<% end -%>
<% if data.key?(:_default) -%>
- **Default:** <%= data[:_default] %>
<% end -%>
<% if data[:_plugin] == true -%>
- **Pluggable:** true
<% end -%>

<% if data.key?(:_example) -%>
```yaml
<%= { transport_option => data[:_example] }.to_yaml(indentation: 2).split("\n").drop(1).join("\n") %>
```
<% end %>
<% end %>
<% end %>
<% if data.key?(:_example) -%>
```yaml
<%= { option => data[:_example] }.to_yaml(indentation: 2).split("\n").drop(1).join("\n") %>
```
<% end %>
<% end %>

## Example files

### â›” `bolt.yaml`

```yaml
# bolt.yaml
<%= @yaml.to_yaml(indentation: 2).split("\n").drop(1).join("\n") %>
```

### `bolt-defaults.yaml`

```yaml
# bolt-defaults.yaml
inventory-config:
<%= @yaml.to_yaml(indentation: 2).split("\n").drop(1).map { |l| "  #{l}" }.join("\n") %>
```

### `inventory.yaml`

```yaml
# inventory.yaml
config:
<%= @yaml.to_yaml(indentation: 2).split("\n").drop(1).map { |l| "  #{l}" }.join("\n") %>
```
